[
["index.html", "ggplot2逆引き集", " ggplot2逆引き集 @kazutan 2016-11-19 これはQiitaで公開されているggplot2逆引きの記事を集めたものです。今のところ，@kazutanが作成した12本をまとめています。 なにかありましたら，以下のGithubリポジトリのissueもしくはTwitterの@kazutanまでおねがいします。 "],
["01-Plotting_two_variables.html", "Q: 1 ggplot2で同一グラフに2変数の折れ線グラフを描きたい 1.1 Q 1.2 A 1.3 参考", " Q: 1 ggplot2で同一グラフに2変数の折れ線グラフを描きたい 1.1 Q このようなデータが手元にあります: test_data &lt;- data.frame( var0 = 100 + c(0, cumsum(runif(49, -20, 20))), var1 = 150 + c(0, cumsum(runif(49, -10, 10))), date = seq.Date(as.Date(&quot;2002-01-01&quot;), by=&quot;1 month&quot;, length.out=100)) この時系列変数var0とvar1の両方共を、dateをx軸にしてggplot2でどうやったら描けますか? できればvar0とvar1の色を変えて、さらに凡例も付けれたら嬉しいです。 1.2 A もし変数が少ないのであれば、マニュアルで別々に作成ビルドアップできますよ: library(ggplot2) ggplot(test_data, aes(date)) + geom_line(aes(y = var0, colour = &quot;var0&quot;)) + geom_line(aes(y = var1, colour = &quot;var1&quot;)) 一般的なアプローチとしては、tydyrパッケージを利用してデータを縦型(long format)に変換していく方法があります: library(tidyr) library(ggplot2) test_data_long &lt;- tidyr::gather(test_data, key=&quot;variable&quot;, value = value, -date) # 縦型に変換 knitr::kable(head(test_data_long, 6)) date variable value 2002-01-01 var0 100.00000 2002-02-01 var0 95.72926 2002-03-01 var0 100.34644 2002-04-01 var0 107.81477 2002-05-01 var0 106.42117 2002-06-01 var0 104.76635 ggplot(data=test_data_long, aes(x=date, y=value, colour=variable)) + geom_line() データを縦型のデータに変換し、var0とvar1を分けるための変数で色分けを指定すればこのようになります。 1.3 参考 この記事は、StackOverflowに投稿された以下の記事をベースに、コードを一部改変して翻訳して作成しました: - r - Plotting two variables as lines using ggplot2 on the same graph - Stack Overflow 関連ドキュメント: - geom_line. ggplot2 0.9.3.1 "],
["02-Showing_data_values_on_stacked_bar.html", "Q: 2 ggplot2で積み重ね棒グラフに値を表示させたい 2.1 Q 2.2 A 2.3 補足 2.4 参考", " Q: 2 ggplot2で積み重ね棒グラフに値を表示させたい 2016/04/12追記: ggplot2 v2.1.0に対応するため、一部コードを修正しました 本記事は ggplot2逆引き プロジェクトの一環として、Stack Oveflow の下記記事を翻訳したものです。 r - Showing data values on stacked bar chart in ggplot2 - Stack Overflow 2.1 Q ggplot2で積み重ね棒グラフに値を重ねて表示したいです。私が試したのは以下のコードです: 2016/04/12追記: ggplot2 v2.1.0でqplot()の仕様が変更されているようでしたので、ggplot()で描くように修正しました Year &lt;- c(rep(c(&quot;2006-07&quot;, &quot;2007-08&quot;, &quot;2008-09&quot;, &quot;2009-10&quot;), each = 4)) Category &lt;- c(rep(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;), times = 4)) Frequency &lt;- c(168, 259, 226, 340, 216, 431, 319, 368, 423, 645, 234, 685, 166, 467, 274, 251) Data &lt;- data.frame(Year, Category, Frequency) library(ggplot2) p &lt;- ggplot(Data, aes(Year, Frequency, fill = Category)) + geom_bar(stat = &quot;identity&quot;) + theme_bw() p + geom_text(aes(label = Frequency), size = 3, hjust = 0.5, vjust = 3, position = &quot;stack&quot;) でもこのデータの値を、各部位の中央に配置したいのです。お願いします。 2.2 A 一つのやり方として、各バーのミッドポイントを算出するというのがあります: library(plyr) library(ggplot2) # calculate midpoints of bars (simplified using comment by @DWin) Data &lt;- ddply(Data, .(Year), transform, pos = cumsum(Frequency) - (0.5 * Frequency)) # plot bars and add text p &lt;- ggplot(Data, aes(x = Year, y = Frequency)) + geom_bar(aes(fill = Category), stat=&quot;identity&quot;) + geom_text(aes(label = Frequency, y = pos), size = 3) library(plyr) library(ggplot2) Year &lt;- c(rep(c(&quot;2006-07&quot;, &quot;2007-08&quot;, &quot;2008-09&quot;, &quot;2009-10&quot;), each = 4)) Category &lt;- c(rep(c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;), times = 4)) Frequency &lt;- c(168, 259, 226, 340, 216, 431, 319, 368, 423, 645, 234, 685, 166, 467, 274, 251) Data &lt;- data.frame(Year, Category, Frequency) # calculate midpoints of bars (simplified using comment by @DWin) Data &lt;- ddply(Data, .(Year), transform, pos = cumsum(Frequency) - (0.5 * Frequency)) # plot bars and add text p &lt;- ggplot(Data, aes(x = Year, y = Frequency)) + geom_bar(aes(fill = Category), stat=&quot;identity&quot;) + geom_text(aes(label = Frequency, y = pos), size = 3) p データフレームにあらかじめ値を配置する高さ(y値)を算出して変数として追加し、geom_text(aes(label = Frequency, y = pos))とその変数を指定すれば、そのラベルは算出した位置に配置されます。 2.3 補足 上記のAの方法は、データフレームに新たに変数を追加することとなります。それを避けて(だいたい)真ん中にくるようになればいい、というのであれば、以下のようなコードでも可能です: p &lt;- ggplot(Data, aes(x = Year, y = Frequency)) + geom_bar(aes(fill = Category), stat=&quot;identity&quot;) + geom_text(aes(label = Frequency), size = 3, position = &quot;stack&quot;, vjust = Frequency/75) p これは、geom-textのvjustに対して設定を加えています。このようにy値の変数を定数で補正したものをvjust =に投げると、割合的にずれてくれるようになります。 ただこの方法ですと、その補正する定数をどう設定したらど真ん中にくるか、はっきりとはわかりません。詳しくはRPubs - vjustのテストをご覧ください。 また、この記事の元となっているStackOverflowの記事には、Hadley Wickham氏による以下のコメントがあったことも付記します: Please don’t. It’s not a good idea to try and improve a confusing visualisation by adding text labels. Either make a table or use a better display of the data. – hadley Jul 12 ’11 at 1:10 2.4 参考 r - Showing data values on stacked bar chart in ggplot2 - Stack Overflow RPubs - vjustのテスト ggplot2逆引き - ggplot2 で geom_text() を使って集合棒グラフにラベルを付けたい #rstatsj - Qiita "],
["03-ggplot2_font.html", "Q: 3 ggplot2で日本語フォントを指定したい 3.1 Q 3.2 A 3.3 参考資料", " Q: 3 ggplot2で日本語フォントを指定したい 3.1 Q ggplot2で日本語のフォントを指定したいです。 3.2 A 基本はtheme()レイヤーでフォントを設定したい部分を指定しながら設定していきます。ただ、ggplot2の古いバージョンによってはうまく動かない可能性があります。ここではv2.1.0以降を念頭に説明します。 指定するフォントを先に変数に入れておきます。今回のコードではこのフォント名を差し替えてもらえればいいかと思います: font_A &lt;- &quot;IPAexMincho&quot; font_B &lt;- &quot;IPAexGothic&quot; なお、フォント名については、各実行環境で様々なので省略します。 3.2.1 テーマとして日本語のフォントを指定する そのプロット全体にテーマフォントとしてフォント指定する場合は、`theme(text = element_text(“FontName”))とフォントを指定すればOKです: library(ggplot2) d &lt;- data.frame(X=rep(1:5, 2), Y=c(1:5, 5:1), A=rep(c(&#39;a&#39;,&#39;b&#39;), each=5)) ggplot(data=d, aes(x=X, y=Y, group=A, color=A)) + geom_line(size=2) + labs(x=&quot;えっくす&quot;, y=&quot;わい&quot;, color=&quot;えー&quot;, title=&quot;たいとる&quot;) + theme(text = element_text(family = font_A)) このelement_text()関数の第一引数はfamily=なので、いきなりフォント名を当ててもOKです。詳しくは?elemet_textでヘルプを確認してください。 3.2.2 個別にフォント指定 個別に設定する場合は、theme()内の引数にaes属性を指定してelement_text()を渡します: ggplot(data=d, aes(x=X, y=Y, group=A, color=A)) + geom_line(size=2) + labs(x=&quot;えっくす&quot;, y=&quot;わい&quot;, color=&quot;えー&quot;, title=&quot;たいとる&quot;) + theme(text = element_text(family = font_A), axis.title.x = element_text(family = font_B)) 上の例では、全体設定でfontA(IPAMincho)を設定し、x軸のタイトルを個別にfontB(IPAGothic)に設定しています。どの属性にどの属性に与えるかは、以下のリンクにある公式ドキュメントを参照してください: http://docs.ggplot2.org/current/theme.html このリンク先で、element_textが設定できる要素について設定できます。主なものを記述した例です: ggplot(data=d, aes(x=X, y=Y, group=A, color=A))+ geom_line(size=2) + labs(x=&quot;えっくす&quot;, y=&quot;わい&quot;, color=&quot;えー&quot;, title=&quot;たいとる&quot;) + theme(text = element_text(family = font_A), #全体設定 title = element_text(family = font_B), #プロット、軸、凡例のタイトル全体設定 axis.title = element_text(family = font_A), #軸タイトルの全体設定 axis.title.x = element_text(family = font_B), #x軸のタイトル設定 axis.text = element_text(family = font_A), #軸テキスト(目盛りなど)の全体設定 axis.text.y = element_text(family = font_B), #y軸テキストの設定 legend.text = element_text(family = font_A), #凡例テキストの設定 legend.title = element_text(family = font_B), #凡例タイトルの設定 plot.title = element_text(family = font_A) #プロットタイトルの設定 ) 3.3 参考資料 http://qiita.com/uri/items/615653e83642d7e475de http://docs.ggplot2.org/current/theme.html "],
["04-adding_space_between_bars_in_ggplot2.html", "Q: 4 ggplot2でbarの間にスペースを追加する 4.1 Q 4.2 A 4.3 補足 4.4 参考", " Q: 4 ggplot2でbarの間にスペースを追加する 2016/04/12追記: ggplot2 v2.1.0に対応させるため一部修正しました 4.1 Q ヒストグラムを作る時、x軸はfactorのlevelsで並ぶと思うのですが、position = &quot;dodge&quot;などの場合、どうやったらbarの間のスペースを追加あるいは調整できるのでしょうか。 library(ggplot2) Treatment &lt;- rep(c(&#39;T&#39;,&#39;C&#39;),each=2) Gender &lt;- rep(c(&#39;M&#39;,&#39;F&#39;),2) Response &lt;- sample(1:100,4) df &lt;- data.frame(Treatment, Gender, Response) hist &lt;- ggplot(df, aes(x=Gender, y=Response, fill=Treatment)) hist + geom_bar(position = &quot;dodge&quot;, stat = &quot;identity&quot;) + scale_y_continuous(limits = c(0, 100), name = &quot;&quot;) widthを使えばいいみたいですが、うまくあたりません。 4.2 A このような設定を試してみてください: hist + geom_bar(width = 0.4, position = position_dodge(width = 0.5)) これは2つのwidthの設定が含まれています: geom_bar内のwidthは、barの幅を決定 position_dodge内のwidthは、それぞれのbarの位置を決定 よって、最初に設定しているgeom_bar(width = 0.4)では、barの幅を0.4として設定しています。また、position_dodge(width = 0.5)では、この場合赤色と青色のbarの間隔を0.5として設定しています。 おそらく色々と説明するよりも、この2つの設定値を色々変更して試してみたほうが、あなたの理解を助けるでしょう。ぜひ色々試してみてください。 4.3 補足 ※ 2015/8/7に指摘を受けましたので補足しました。berobero11さん、kohskeさんありがとうございました。 4.3.1 設定例の一覧 上と同じパターンで、2つのwidthを色々設定してみたパターンを一覧できるものを作成しました: plot &lt;- ggplot(df, aes(x=Gender, y=Response, fill=Treatment)) + scale_y_continuous(limits = c(0, 100), name = &quot;&quot;) + theme(legend.position = &quot;none&quot;) + facet_wrap(~p) + mapply(function(w, pw) geom_bar(data = transform(df, p=sprintf(&quot;w_%.02f_pw_%.02f&quot;, w, pw)), stat = &quot;identity&quot;, width= w, position = position_dodge(width = pw)), w = c(0.6,0.6,0.6,0.3,0.3,0.3), pw = c(0.4,0.7,1.0,0.4,0.7,1.0)) plot 上の段がgeom_bar(width = 0.6)で、下の段がgeom_bar(width = 0.4)です。また左から順番にposition_dodge(width = c(0.4,0.7,1.0))という設定にしています。 mapplyで設定している部分については、複数のggplot2要素を関数で渡したい を参考に作成しています。 4.3.2 errorbarについて 2016/04/12追記: ggplot2 v2.1.0に対応するため修正しました。 errorbarについても、position = position_dodge(width = 0.9)のように設定できます: ggplot(mtcars, aes(factor(cyl), mpg, fill = factor(am))) + stat_summary(fun.data = mean_se, position = position_dodge(width = 0.9), geom = &quot;linerange&quot;) + stat_summary(fun.y = mean, geom = &quot;bar&quot;, position = position_dodge(width = 0.9)) この場合、最初のstat_summaryでエラーバーを設定し、次のstat_summaryでバーを設定しています。両方のposition = position_dodgge(width = )は揃えておきましょう。 (2016/04/12追記: 以下のコードでlayer()でgeom_params=やstat_params=が使えなくなり、params=に統合されたようです ただし、stat_summaryでバーの幅を変えたい場合は面倒になります。stat_summary(width = 0.9)といった設定は反映されないからです。幅をかえるには、layerからparams = list(width = 0.6)とパラメータを指定していく方法があります: ggplot(mtcars, aes(factor(cyl), mpg, fill = factor(am))) + stat_summary(fun.data = mean_se, position = position_dodge(width = 0.8), geom = &quot;linerange&quot;) + layer(geom = &quot;bar&quot;, params = list(width = 0.6, fun.data = mean_se), stat = &quot;summary&quot;, position = position_dodge(width = 0.8)) layerに関する説明は省略しますが、params=list()などはlayerに設定値を与えたものを作成します。興味がある方は、R言語上級ハンドブックのsection-54をご覧ください。 4.4 参考 この記事は、以下の記事をベースに日本語化しています: r - Adding space between bars in ggplot2 - Stack Overflow 関連する公式ヘルプトピックス geom_bar. ggplot2 0.9.3.1 position_dodge. ggplot2 0.9.3.1 複数のggplot2要素を関数で渡したい "],
["05-bandgraph_ggplot2.html", "Q: 5 ggplot2で帯グラフを作る 5.1 Q 5.2 A 5.3 参考", " Q: 5 ggplot2で帯グラフを作る 5.1 Q ggplot2で帯グラフを作成したいのですが、どうやったら描けるでしょうか? 5.2 A 以下の要素を組み合わせると帯グラフが描けます: 形状は棒グラフ(geom = &quot;bar) y軸をフルに設定(position = &quot;full) y軸をパーセンタイル標記に設定(scale_y_continuous(labels = percent)) x軸とy軸を入れ替えて横棒グラフに設定(coord_flip()) 項目順の調整 ※必要であれば 以下のコードから要素を追加していきます: library(ggplot2) p &lt;- ggplot(mtcars, aes(x = as.factor(gear), fill = as.factor(vs))) + geom_bar() p 5.2.1 y軸をフルに設定 y軸を、一端からもう一端へと引き伸ばすには、`position = “fill”を設定します: p &lt;- ggplot(mtcars, aes(x = as.factor(gear), fill = as.factor(vs))) + geom_bar(position = &quot;fill&quot;) p このとき、y軸のメモリが0-1.00と比率へ自動的に変化していることに留意してください。 5.2.2 y軸をパーセンタイル標記に設定 {scale}パッケージを読み込んで、scale_y_continuous(labels=percent)の設定を追加します: require(scales) p &lt;- ggplot(mtcars, aes(x = as.factor(gear), fill = as.factor(vs))) + geom_bar(position = &quot;fill&quot;) + scale_y_continuous(labels = percent) p 他にも方法はありますがこれが一番スムーズできれいにできます。{ggplot2}パッケージをインストールしているなら、{scales}はおそらくすでにインストールされています。 5.2.3 x軸とy軸を入れ替えて横棒グラフに設定 この方法については、ggplot2逆引き - ggplot2で縦軸と横軸をひっくり返したい - Qiitaを参照してください。 require(scales) p &lt;- ggplot(mtcars, aes(x = as.factor(gear), fill = as.factor(vs))) + geom_bar(position = &quot;fill&quot;) + scale_y_continuous(labels = percent) + coord_flip() p 5.2.4 項目順の調整 この方法については、ggplot2逆引き - x軸を並べ替えたい - Qiitaを参照してください。 require(scales) mtcars.v2 &lt;- transform(mtcars, gear2 = gear * -1) p &lt;- ggplot(mtcars.v2, aes(x = reorder(gear, gear2), fill = as.factor(vs))) + geom_bar(position = &quot;fill&quot;) + scale_y_continuous(labels = percent) + coord_flip() p これで帯グラフの完成です。結構手間がかかります。 5.3 参考 position_fill. ggplot2 0.9.3.1 scale_x_continuous. ggplot2 0.9.3.1 ggplot2逆引き - ggplot2で縦軸と横軸をひっくり返したい - Qiita ggplot2逆引き - x軸を並べ替えたい - Qiita "],
["06-flipped_cartesian_coordinates.html", "Q: 6 ggplot2で縦軸と横軸をひっくり返したい 6.1 Q 6.2 A 6.3 応用 6.4 参考", " Q: 6 ggplot2で縦軸と横軸をひっくり返したい 6.1 Q 例えば以下のようなグラフで、x軸とy軸をひっくり返したい(横棒グラフ)にしたいのですが、どうしたらいいのでしょうか? library(ggplot2) ggplot(mtcars, aes(x = as.factor(gear))) + geom_bar() 6.2 A + coord_flip()を追加すると、x軸とy軸が入れ替わります: ggplot(mtcars, aes(x = as.factor(gear))) + geom_bar() + coord_flip() この設定は、別に棒グラフだけではなく、全てに適用可能です。 6.3 応用 このcoord_flip()を設定した場合、更に軸に設定を加えるときは元の座標軸に設定してください: 例) count軸の範囲を変更する場合: ggplot(mtcars, aes(x = as.factor(gear))) + geom_bar() + coord_flip() + ylim(c(0,20)) また、棒グラフを横にすると、下から順番にならびます。軸の内容の並べ替えについては、以下の記事を参照してください: - ggplot2逆引き - x軸を並べ替えたい - Qiita 今回x軸はfactor型なので、順番を入れ替えるには以下のようにreorder()を当てて変更しておく必要があります: 例) as.factor(gear)軸の順序を反転する場合: ggplot(mtcars, aes(x = reorder(as.factor(gear), gear * -1))) + geom_bar() + coord_flip() なお、x軸が連続変量であったならば、単に+ scale_x_reverse()を追加すればOKです。 例) gear軸の順序を反転する場合: ggplot(mtcars, aes(x = gear)) + geom_bar() + coord_flip() + scale_x_reverse() 6.4 参考 coord_flip. ggplot2 0.9.3.1 ggplot2逆引き - x軸を並べ替えたい - Qiita "],
["07-ggplot2_element_function.html", "Q: 7 複数のggplot2要素を関数の戻り値で渡したい 7.1 Q 7.2 A 7.3 応用 7.4 参考資料", " Q: 7 複数のggplot2要素を関数の戻り値で渡したい 7.1 Q 複数のggplot2の要素を加えたいのですが、以下のように手動でやるとうまくいきます: require(ggplot2) p &lt;- ggplot(aes(x = mpg, y = hp), data = mtcars) p + geom_vline(xintercept = 20) + geom_point(data = mtcars) でも、これ関数に持たせようと思って以下のようにしてみるとエラーがでます: myFunction &lt;- function() { return( geom_vline(xintercept = 20) + geom_point(data = mtcars) ) } p &lt;- ggplot(aes(x = mpg, y = hp), data = mtcars) # p + myFunction() # ここで以下のエラーがでます: # &quot;エラー: 二項演算子の引数が数値ではありません&quot; ggplot2に関数の戻り値で複数の要素を放り込むにはどうしたらいいでしょうか? 7.2 A ggplot2は要素の「リスト」をサポートしています: myFunction &lt;- function() list(geom_vline(xintercept = 20), geom_point(data = mtcars)) p &lt;- ggplot(aes(x = mpg, y = hp), data = mtcars) p + myFunction() このように各要素をリストとしてまとめ、“+”で追加するとうまく組み込まれます。このgeom_*以外にも、“+”で束ねることができるものであれば同様にlistとして渡すことができます。 またこれを利用すれば、事前にggplot2の要素をまとめておいてデータセットだけ切り替えるなど、非常に応用がききます。 7.3 応用 7.3.1 要素のリストを使いまわす 「ggplot2は要素のリストをサポートする」ことを応用すれば、以下のようなことができます: lay = list(stat_summary(fun.y = mean, geom = &quot;line&quot;), stat_summary(fun.data = mean_se)) ggplot(mtcars, aes(am, mpg, colour = factor(vs), group=factor(vs))) + lay ggplot(iris, aes(Species, Sepal.Length, group=1)) + lay このコードでは、「折れ線グラフでxの各点における標準誤差も描く」というのを繰り返し利用するため、それらを表現するggplot2要素をlayというlistに束ねています。こうすることで、“+ lay”と追加することで簡単に描くことができます。 7.3.2 繰り返しを関数にして、lapplyでリストで受け取る また、繰り返し処理を行いたいときは、lapplyで記述することも可能です: p &lt;- ggplot(iris, aes(y=Sepal.Width, x=Species)) + stat_summary(fun.y=mean, geom = &quot;bar&quot;) + ylim(0,6) + lapply(1:3, function(i) geom_segment(x=i-0.4, y=7-i, xend=i+0.4, yend=7-i)) p 繰り返し処理をしたい場合、for(i in 1:3)などで実行するとうまくいきません。ですが、繰り返したい処理を関数にしてlapplyで実行するようにすれば、返り値はlistになるのでちゃんと要素の内容が当たるようになります。 7.3.3 mapplyで複数の引数がある関数を繰り返す もし複数の引数が必要ならば、mapplyを利用する方法もあります: p = ggplot(data.frame(x = c(-10, 10)), aes(x)) + mapply(function(m, s, co) stat_function(fun = dnorm, args = list(mean = m, sd = s), colour = co), -1:1, c(0.5, 1, 1.5), rainbow(3)) p mapplyは第一引数の関数に対し、それ以降の引数を当てて実行し、その結果をlistで返してきます。なので上の例のように、パラメータを変化させながら重ね書きする時などはきっと重宝するでしょう。 これらはほんの一例ですので、ぜひ色々試してみてください。 7.4 参考資料 この記事は、以下のstackoverflowの内容を参考に書き起こしました: r - How can I combine multiple ggplot2 elements into the return of a function? - Stack Overflow "],
["08-set_only_lower_bound.html", "Q: 8 ggplotで数値軸の下限値(or上限値)だけを指定したい 8.1 Q 8.2 A 8.3 参考", " Q: 8 ggplotで数値軸の下限値(or上限値)だけを指定したい 8.1 Q 数値軸の下限を0にして、上限は設定しないというのはできないのでしょうか。例えば以下のようなコードのイメジです: + scale_y_continuous(minlim=0) 8.2 A 1.0.0以降のバージョンであれば、下限値・上限値を設定するところにNAが使えます。以下をサンプルに設定します: library(ggplot2) ggplot(mtcars, aes(wt, mpg)) + geom_point() これに、scale_y_continuous(limits = c(0, NA))を加えます: ggplot(mtcars, aes(wt, mpg)) + geom_point() + scale_y_continuous(limits = c(0, NA)) また、ylim(c(0, NA))でも指定可能ですし、x軸についても同様です: ggplot(mtcars, aes(wt, mpg)) + geom_point() + ylim(c(0, NA)) + xlim(c(-2, NA)) 0.9.xのバージョンを使っている場合は、expand_limits(y=0)が使用可能です: ggplot(mtcars, aes(wt, mpg)) + geom_point() + expand_limits(y=0) もし1.0.0以降を使用しているなら、わかりやすさも含めて前者の方法を用いるといいでしょう。 8.3 参考 この記事は、StackOverflowに投稿された以下の記事を参考に翻訳し、一部内容を変更して作成しました: r - set only lower bound of a limit for ggplot - Stack Overflow "],
["09-sort_legend_in_ggplot2.html", "Q: 9 ggplot2で凡例を並び替えたい 9.1 Q1 9.2 A1 9.3 Q2 9.4 A2 9.5 Q3 (コメント指摘より2015/8/2に追記) 9.6 A3 9.7 参考", " Q: 9 ggplot2で凡例を並び替えたい 9.1 Q1 ggplot2を使って積み重ねの縦棒グラフを描くと、このようになります: require(ggplot2) p &lt;- ggplot(diamonds, aes(cut, fill = clarity)) + geom_bar() p しかし、これだと積み重ねの順番と凡例の順番が逆になります。凡例を逆順にしたいのですがどうすればいいでしょうか? 9.2 A1 guide_legend(reverse = TRUE)を活用すると逆順になります: p &lt;- ggplot(diamonds, aes(cut, fill = clarity)) + geom_bar() + guides(fill = guide_legend(reverse = TRUE)) p このguides(fill = guide_legend(reverse = TRUE))によって、aes(fill = )で指定したfactorの順番が逆順となります。aes(colour = )で指定したfactorについては、以下のようにしてください: p &lt;- ggplot(diamonds, aes(cut, colour = clarity)) + geom_bar(fill = &quot;white&quot;) + guides(colour = guide_legend(reverse = TRUE)) p これらは棒グラフ以外でも有効です。ただし、凡例(legend)内の順序が反転するだけです。 9.3 Q2 ggplot2で、「色と形」というように凡例に表示させるものが2種類以上ある場合、その変数の順番は変更できるのでしょうか。例えば以下のような場合です: p &lt;- ggplot(diamonds, aes(carat, price, colour = clarity, shape = cut)) + geom_point() + theme(legend.position = &quot;top&quot;) p このとき、オプションを指定する順番を入れ替えたり、shapeとcolourで指定する変数を入れ替えたりしても、必ずcutが上にくるようになります。これを入れ替える方法はあるのでしょうか? 9.4 A2 version 0.9.2より、guide_legend(order = )で順番を指定することができます: p &lt;- ggplot(diamonds, aes(carat, price, colour = clarity, shape = cut)) + geom_point() + theme(legend.position = &quot;top&quot;) + guides(shape = guide_legend(order = 2), colour = guide_legend(order = 1)) p p + guides(shape = guide_legend(order = 1), colour = guide_legend(order = 2)) なおguide_legendとしているように、設定があたるのは凡例(legend)だけです。 9.5 Q3 (コメント指摘より2015/8/2に追記) 上の内容は離散的な変数の凡例ですが、連続的な変数の凡例(colourbar)ではできますか? p &lt;- ggplot(iris, aes(x = Species, y = Sepal.Length, colour = Sepal.Width)) + geom_point() p 9.6 A3 可能です。Q1のreverse = TRUEやQ2のorder = hogeのオプションはguide_colourbarも対応しています。まずreverseでの例はこちらです: p &lt;- ggplot(iris, aes(x = Species, y = Sepal.Length, colour = Sepal.Width)) + geom_point() + guides(colour = guide_colourbar(reverse = TRUE)) p orderでの例はこちらです: p &lt;- ggplot(diamonds, aes(carat, price, colour = depth, shape = cut)) + geom_point() + theme(legend.position = &quot;top&quot;) + guides(shape = guide_legend(order = 1), colour = guide_colourbar(order = 2)) p guidesをつけていないと、colourbarのdepthが優先されて上に来ますが、このコードのように設定すると下に来ます。 9.7 参考 guide_legend. ggplot2 0.9.3.1 guide_colourbar. ggplot2 0.9.3.1 (Q3に対応して追加, 2015/8/2) R: sort legend in ggplot2 - Stack Overflow r - Controlling ggplot2 legend display order - Stack Overflow "],
["10-sort_x-axis.html", "Q: 10 x軸を並べ替えたい 10.1 Q 10.2 A 10.3 参考", " Q: 10 x軸を並べ替えたい 10.1 Q x軸を並べ替えたいのですが、どうすればいいのでしょうか。 10.2 A 変数が連続変数か離散変数かによってかなり違ってきます。 10.2.1 連続的である場合 軸が連続的である場合、標準で昇順になるかと思います: library(ggplot2) p &lt;- ggplot(mtcars, aes(x = gear, y = wt)) + geom_point() p これを反転して降順にしたい場合は、+ scale_x_reverse()を追加します: p &lt;- ggplot(mtcars, aes(x = gear, y = wt)) + geom_point() + scale_x_reverse() p 10.2.2 離散的である場合 多くの場合、factor型かと思います。 10.2.2.1 もとは数値データをas.factorで使っているパターン 以下のようなパターンを考えます: p &lt;- ggplot(mtcars, aes(x = as.factor(gear), y = wt)) + geom_boxplot() p この場合、以下のような変数を新たに算出し、reorderに組み込みます: mtcars.v2 &lt;- transform(mtcars, gear2 = gear * -1) # 値の順序が逆転する変数gear2を作成 p &lt;- ggplot(mtcars.v2, aes(x = reorder(gear, gear2), y = wt)) + geom_boxplot() p gear2は値が負になりますが、この変数はgearの順番をreorderさせるためだけに使用するので問題ありません。 10.2.2.2 何か外的な基準に基づいて並べ替えたいパターン factor型の変数の順序を、他の変数の要約値(平均や中央値など)で並べ替えたい場合があります。以下を例にします: ggplot(iris, aes(x = Species, y = Sepal.Width)) + stat_summary(fun.y = mean, geom = &quot;bar&quot;) このx軸を、Sepal.Widthの昇順で並べ替えるには、以下のようにします: ggplot(iris, aes(x = reorder(x = Species, X = Sepal.Width, FUN = mean), y = Sepal.Width)) + stat_summary(fun.y = mean, geom = &quot;bar&quot;) reorderの設定についてはこの変数のヘルプを確認してください。 10.2.2.3 順序的意味がないfactor型を任意に並べ替えたいパターン ※ 2015/8/2修正: ggplot2ではfactor型のorderは考慮しないそうですので、該当箇所を削除して修正しました(@kohskeさん@berobero11さんありがとうございました) ※ 大幅に改定することになったので、この箇所についてはほぼ書きなおしています。 ggplot2では、factor型のlevelsで表示される順番で項目を並べます: levels(iris$Species) ## [1] &quot;setosa&quot; &quot;versicolor&quot; &quot;virginica&quot; この順番は、factor(x, levels = c(&quot;hoge&quot;, ...))で変更可能です。したがって、この順序を新たに設定すればそのようになります: iris2 &lt;- transform(iris, Species= factor(Species, levels = c(&quot;virginica&quot;, &quot;setosa&quot;, &quot;versicolor&quot;))) なお、この時全てのlevelsを含めるよう注意してください。 このirisとiris2を比較します: ggplot(iris, aes(Species)) + geom_bar() ggplot(iris2, aes(Species)) + geom_bar() このように、factor型の場合は順序を設定することで、任意に並べ替えることが可能です。 10.3 参考 scale_x_continuous. ggplot2 0.9.3.1 "],
["11-spline_ggplot2.html", "Q: 11 ggplot2でspline()関数を使って曲線を描きたい 11.1 Q 11.2 A 11.3 参照", " Q: 11 ggplot2でspline()関数を使って曲線を描きたい 11.1 Q 私の持っているデータで、spline(y~x)というようにspline関数を使って曲線を描きたいのですが、lm(y~ns(x), df=_)といったスムージングを使う方法しか見つけられません。 どうしてもspline()を使いたいのですが、ggplotでspline()を使うシンプルな方法はありますか。以下のような方法を考えたのですが、できればこういうテクニックに頼りたくありません: geom_smooth(aes(x=(spline(y~x)$x, y=spline(y~x)$y)) 11.2 A 以下の方法を試してみてください: library(ggplot2) n &lt;- 10 d &lt;- data.frame(x = 1:n, y = rnorm(n)) ggplot(d,aes(x,y)) + geom_point() + geom_line(data=data.frame(spline(d, n=n*10))) まず実際のデータをgeom_point()でプロットしておき、スプライン曲線はgeom_line()で引きます。このとき、この曲線で使用するデータとして、spline()で処理したデータフレームを指定すればOKです。 11.3 参照 この記事は、以下のStack Overflowに投稿された内容を翻訳して大幅に改編したものです: r - How can I use spline() with ggplot? - Stack Overflow "],
["12-transparent_bg_using_ggplot2.html", "Q: 12 ggplot2で透明な背景にする方法 12.1 Q 12.2 A 12.3 参照", " Q: 12 ggplot2で透明な背景にする方法 12.1 Q ggplot2で作成したグラフィックを、背景が透明なPNGに出力する必要があります。基本Rグラフィックならうまくいくのですが、ggplot2だと透明になりません: d &lt;- rnorm(100) #ランダムデータ生成 # これなら透明背景のPNGができます png(&#39;tr_tst1.png&#39;,width=300,height=300,units=&quot;px&quot;,bg = &quot;transparent&quot;) boxplot(d) dev.off() # ggplot2でオブジェクト作成 df &lt;- data.frame(y=d,x=1) p &lt;- ggplot(df) + stat_boxplot(aes(x=x,y=y)) p &lt;- p + theme( panel.background = element_rect(fill = &quot;transparent&quot;,color = NA), panel.grid.minor = element_line(color = NA), panel.grid.major = element_line(color = NA) ) # でもこれだと背景が白くなります png(&#39;tr_tst2.png&#39;,width=300,height=300,units=&quot;px&quot;,bg = &quot;transparent&quot;) p dev.off() ※ 評価させていません ggplot2で透明背景を出力させる方法はあるのでしょうか。 12.2 A 上記のtheme()設定では、plot.backgroundを透明指定していません。まずは以下のようにggplot2のオブジェクトを作成します: d &lt;- rnorm(100) df &lt;- data.frame(y=d,x=1) p &lt;- ggplot(df) + stat_boxplot(aes(x = x,y=y)) p &lt;- p + theme( panel.background = element_rect(fill = &quot;transparent&quot;,color = NA), panel.grid.minor = element_line(color = NA), panel.grid.major = element_line(color = NA), plot.background = element_rect(fill = &quot;transparent&quot;,color = NA) #ここを追加 ) p これで、背景要素が透明になります。これをPNG形式に出力するにはggsaveが便利です: ggsave(&quot;tr_tst3.png&quot;, p, bg = &quot;transparent&quot;) ※ 評価させていません ?ggsaveにはbgという引数はありませんが、その他の引数はこの場合graphics deviceにそのまま送られるため、透明処理が働きます。逆にこの引数を設定しないと透明にならず白色になります。 また、knitrなどで出力する場合には、チャンクオプションとしてdev.args=list(bg='transparent)の記述が必要です: {r hogehoge, dev.args = list(bg = &#39;transparent&#39;)} この際も、出力するggplot2のオブジェクトには、背景要素を全て透明に設定しておいてください。 12.3 参照 この記事は、StackOverflowに投稿された以下の記事を参考に、現在のggplot2のバージョンにあうようにコードを編集し、一部内容を変更して作成しました: - How to make graphics with transparent background in R using ggplot2? - Stack Overflow 関連記事・ドキュメント: - How to use a “R-generated” plot as a semi-transparent background in an HTML5 slide made by knitr? - Stack Overflow - theme. ggplot2 0.9.3.1 "]
]
